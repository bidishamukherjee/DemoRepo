package com.orch.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.catalogue.entity.Product;
import com.orch.SearchTypeEnum;
import com.orch.bean.ProductDetail;
import com.orch.dao.ProductCatalogClient;
import com.orch.dao.ProductPricingClient;

@RestController
@RequestMapping("/productdetail")
public class ProductDetailController {

	@Autowired
	private ProductCatalogClient productCatalogClient;
	
	@Autowired
	private ProductPricingClient productPricingClient;

	@RequestMapping(method = RequestMethod.GET)
	public Iterable<Product> getAllProducts() {
		return productCatalogClient.getAllProducts();
	}

	@RequestMapping(value = "/search/{searchType}", method = RequestMethod.GET)
	public Iterable<ProductDetail> getSpecificProducts(
			@PathVariable("searchType") String searchType,
			@RequestParam("searchValue") String searchValue) {
		if (SearchTypeEnum.BRAND.equals(SearchTypeEnum.valueOf(searchType))) {
			// repository.findByBrand(searchValue);
			// return repository.findByBrand(searchValue);
			return null;
		} else if (SearchTypeEnum.TYPE.equals(SearchTypeEnum
				.valueOf(searchType))) {
			// return repository.findByType(searchValue);
			return null;
		} else {
			return null;
		}
	}

	@RequestMapping(method = RequestMethod.POST)
	@ResponseStatus(HttpStatus.CREATED)
	public ProductDetail add(@RequestBody @Valid ProductDetail productDetail) {
		// return repository.save(productDetail);
		return null;
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void remove(@PathVariable("id") String id) {
		// repository.delete(id);
	}

}
